import os
import subprocess


# Get path to check-vpdpbssd binary
check_tool = os.path.join(os.path.dirname(__file__), "check-vpdpbssd")

def is_vpdpbssd_supported():
    if not os.path.exists(check_tool):
        return False
    try:
        result = subprocess.run([check_tool], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return result.returncode == 0
    except Exception:
        return False


def is_arch(target):
    # Arch detection not working on Windows
    if sys.platform in ['win32']:
        return False

    try:
        cmd = subprocess.Popen(
            ['uname', '-m'], stdout=subprocess.PIPE)
    except OSError:
        return False

    out = cmd.stdout.read().decode('ascii')
    cmd.wait()

    return target in out


# Should skip the machine that has no avx512_bf16 support
if not is_vpdpbssd_supported():
    config.unsupported = True

# Enable only on x86
# Other targets may use different VNNI blocking scheme that is not compatible with
# prepacked shapes in some of the tests
if not is_arch('x86'):
    config.unsupported = True
